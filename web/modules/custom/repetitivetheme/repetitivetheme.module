<?php

use Drupal\Core\Database\Query\Condition;
use Drupal\Core\Url;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\views\Views;


///**
// * @param ViewExecutable $view
// * @param QueryPluginBase $query
// */
function repetitivetheme_views_query_alter(ViewExecutable $view, QueryPluginBase $query)
{
  switch ($view->storage->id()) {
    case 'produits':
      if ($view->current_display == 'block_2') {
        $node = \Drupal::routeMatch()->getParameter('node');
        if (!empty($node)) {
          $gamme_id = $node->field_gamme->getString();
          $category_id = $node->field_categorie_prod->getString();
          $current_id = $node->id();
          if ($gamme_id){
//            $query->addField('node_field_data_node__field_gamme','nid');
            $query->addWhere('conditions', 'node_field_data_node__field_gamme.nid', $gamme_id, '=');
          }elseif($category_id){
            $query->addField('node__field_categorie_prod', 'field_categorie_prod_target_id');
            $query->addWhere('conditions', 'node__field_categorie_prod.field_categorie_prod_target_id', $category_id, '=');
          }


//          $query->addWhere(isset($query->options['group'])? $query->options['group']:[],
//            (new Condition('OR'))
//              ->condition('node_field_data_node__field_gamme.nid', $gamme_id, '=')
//              ->condition('taxonomy_term_field_data_node__field_categorie_prod.tid', $category_id, '='));



          $query->addWhere('conditions', 'node_field_data.nid', $current_id, '!=');

        }
      }
      break;

  }
}



/**
 * Implements hook_theme_suggestions_HOOK_alter().
 * @param $suggestions
 * @param $variables
 * @param $hook
 */
function repetitivetheme_theme_suggestions_block_alter(&$suggestions, $variables, $hook)
{
  $element = $variables['elements'];

  if ($variables['elements']['#plugin_id'] == 'system_main_block') {
    if (!is_null(Drupal::requestStack()->getCurrentRequest()->attributes->get('exception'))) {
      $status_code = Drupal::requestStack()->getCurrentRequest()
        ->attributes->get('exception')->getStatusCode();
      if ($status_code == 404 || $status_code == 403) {
        $suggestions[] = $hook . '__' . (string)$status_code;
      }
    }
  } else {
    if (!empty($element['content']['#block_content'])) {
      $block_bundle = $element['content']['#block_content']->bundle();
      $suggestions[] = 'block__' . $block_bundle;
    }
  }
}


function repetitivetheme_preprocess_breadcrumb(&$variables)
{

  if (!is_null(Drupal::requestStack()->getCurrentRequest()->attributes->get('exception'))) {
    $status_code = Drupal::requestStack()->getCurrentRequest()
      ->attributes->get('exception')->getStatusCode();
    if ($status_code == 404) {
      $variables['breadcrumb'][] = [
        'text' => t('Page not found'),
      ];
    }

//        if ($status_code == 403){
//            $variables['breadcrumb'][] = [
//                'text' => t('Access denied'),
//            ];
//        }
  }
}


/**
 * @param $variables
 * @param $hook
 * @param $info
 */
function repetitivetheme_preprocess_block(&$variables, $hook, &$info)
{
  // Inject the current language into every template to ease theme development.
  $variables['current_language'] = \Drupal::languageManager()
    ->getCurrentLanguage()
    ->getId();
}


/**
 * @param $variables
 */
function repetitivetheme_preprocess_file_upload_help(&$variables)
{
  $variables['descriptions'] = ' ';
}

/**
 * @param array $suggestions
 * @param array $variables
 * @param $hook
 */
function repetitivetheme_theme_suggestions_paragraph_alter(array &$suggestions, array &$variables, $hook)
{
  $paragraph = $variables['elements']['#paragraph'];
  $node = \Drupal::routeMatch()->getParameter('node');
  if (!empty($node)) {
    $suggestions[] = $hook . '__' . $paragraph->bundle() . '__' . $node->getType() . '__' . $node->id();
  }


}


/**
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function repetitivetheme_form_alter(&$form, &$form_state, &$form_id)
{
  switch ($form_id) {
    case 'user_login_form':
      $form['name']['#attributes']['placeholder'] = t("Username");
      $form['name']['#attributes']['class'][] = "form-control";
      $form['pass']['#attributes']['placeholder'] = t('Password');
      $form['pass']['#attributes']['class'][] = 'form-control';
      $form['actions']['submit']['#attributes']['class'][] = 'btn btn-primary';
      break;
    case 'user_pass':
      $form['name']['#attributes']['placeholder'] = t("Username or email address");
      $form['name']['#attributes']['class'][] = "form-control";
      $form['actions']['submit']['#attributes']['class'][] = 'btn btn-primary';
      break;
  }
}


function repetitivetheme_theme_suggestions_views_view_alter(array &$suggestions, array &$variables, $hook)
{

  if ($variables['view']->id() && $variables['view']->current_display) {
    $suggestions[] = $hook . '__' . $variables['view']->id() . '__' . $variables['view']->current_display;

  }
}


function repetitivetheme_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array &$variables, $hook)
{

  if ($variables['view']->id() && $variables['view']->current_display) {
    $suggestions[] = $hook . '__' . $variables['view']->id() . '__' . $variables['view']->current_display;

  }
}

/**
 * @param array $suggestions
 * @param array $variables
 * @param $hook
 */
function repetitivetheme_theme_suggestions_form_alter(array &$suggestions, array &$variables, $hook)
{
  if (isset($variables['element']['#form_id'])) {
    $form_id = $variables['element']['#form_id'];
    $suggestions[] = $hook . '__' . $form_id;
  }
}


/**
 * @param array $suggestions
 * @param array $variables
 * @param $hook
 */
function repetitivetheme_theme_suggestions_form_element_alter(array &$suggestions, array &$variables, $hook)
{
  if (isset($variables['element']['#id'])) {
    $id = str_replace("-", "_", $variables['element']['#id']);
    $suggestions[] = $hook . '__' . $id;
  }
}

/**
 * @param array $suggestions
 * @param array $variables
 * @param $hook
 */
function repetitivetheme_theme_suggestions_input_alter(array &$suggestions, array &$variables, $hook)
{

  if (isset($variables['element']['#id'])) {
    $id = str_replace("-", "_", $variables['element']['#id']);
    $suggestions[] = $hook . '__' . $id;
  }
}


/**
 * @param array $suggestions
 * @param array $variables
 * @param $hook
 */
function repetitivetheme_theme_suggestions_file_managed_file_alter(array &$suggestions, array $variables, $hook)
{
  if (isset($variables['element']['#id'])) {
    $id = str_replace("-", "_", $variables['element']['#id']);
    $suggestions[] = $hook . '__' . $id;
  }

}


/**
 * @param array $suggestions
 * @param array $variables
 * @param $hook
 */
function repetitivetheme_theme_suggestions_fieldset_alter(array &$suggestions, array $variables, $hook)
{
  if (isset($variables['element']['#id'])) {
    $id = str_replace("-", "_", $variables['element']['#id']);
    $suggestions[] = $hook . '__' . $id;
  }
}

/**
 * @param array $suggestions
 * @param array $variables
 * @param $hook
 */
function repetitivetheme_theme_suggestions_radios_alter(array &$suggestions, array $variables, $hook)
{
  if (isset($variables['element']['#id'])) {
    $id = str_replace("-", "_", $variables['element']['#id']);
    $suggestions[] = $hook . '__' . $id;
  }
}


function repetitivetheme_theme_suggestions_select_alter(array &$suggestions, array $variables, $hook)
{
  if (isset($variables['element']['#id'])) {
    $id = str_replace("-", "_", $variables['element']['#id']);
    $suggestions[] = $hook . '__' . $id;
  }
}


/**
 * @param array $suggestions
 * @param array $variables
 * @param $hook
 */
function repetitivetheme_theme_suggestions_pager_alter(array &$suggestions, array $variables, $hook)
{
  $var = \Drupal::routeMatch()->getParameter('entity');
  if (isset($var) && !empty($var->getEntityTypeId()) && $var->getEntityTypeId() == "search_page") {
    $suggestions[] = $hook . '__search__page';
  }
}


/**
 * @param $variables
 */
function repetitivetheme_preprocess_webform(&$variables)
{
  $variables['current_language'] = \Drupal::languageManager()
    ->getCurrentLanguage()
    ->getId();
}

/**
 * @param $variables
 */
function repetitivetheme_preprocess_maintenance_page(&$variables)
{
  // Inject the current language into every template to ease theme development.
  $variables['current_language'] = \Drupal::languageManager()
    ->getCurrentLanguage()
    ->getId();
}

/**
 * @param $variables
 */
function repetitivetheme_preprocess_node(&$variables)
{
  $variables['current_language'] = \Drupal::languageManager()
    ->getCurrentLanguage()
    ->getId();
}

/**
 * @param $vars
 */
function repetitivetheme_preprocess_menu(&$vars)
{
  $variables['current_language'] = \Drupal::languageManager()
    ->getCurrentLanguage()
    ->getId();
}

/**
 * @param $vars
 */
function repetitivetheme_preprocess_page(&$vars)
{
  $variables['current_language'] = \Drupal::languageManager()
    ->getCurrentLanguage()
    ->getId();
}

/**
 * @param $variables
 */
function repetitivetheme_preprocess_html(&$variables)
{
  $variables['current_language'] = \Drupal::languageManager()
    ->getCurrentLanguage()
    ->getId();
}

/**
 * @param $variables
 */
function repetitivetheme_preprocess_views_view_unformatted(&$variables)
{
  // Inject the current language into every template to ease theme development.
  $variables['current_language'] = \Drupal::languageManager()
    ->getCurrentLanguage()
    ->getId();
}


/**
 * @param $form
 * @param $form_state
 */
function repetitivetheme_form_search_form_alter(&$form, &$form_state)
{
  $manager = \Drupal::languageManager();
  $form['advanced']['lang-fieldset']['language']['#default_value'] = [$manager->getCurrentLanguage()->getId()];
}

/**
 * @param $form
 * @param $form_state
 */
function repetitivetheme_form_search_block_form_alter(&$form, &$form_state)
{
  $manager = \Drupal::languageManager();

  $form['advanced-form'] = [
    '#type' => 'hidden',
    '#value' => 1,
  ];
  $form['f[0]'] = [
    '#type' => 'hidden',
    '#value' => 'language:' . $manager->getCurrentLanguage()->getId(),
  ];
}


/**
 * @param $variables
 */
function repetitivetheme_preprocess_image(&$variables)
{
  if (isset($variables['attributes']['width'])) {
    unset($variables['attributes']['width']);
  }
  if (isset($variables['attributes']['height'])) {
    unset($variables['attributes']['height']);
  }
  if (isset($variables['attributes']['typeof'])) {
    unset($variables['attributes']['typeof']);
  }
}


function repetitivetheme_theme_suggestions_table_alter(array &$suggestions, array $variables, $hook)
{
  if (isset($variables['attributes']['id'])) {
    $id = str_replace("-", "_", $variables['attributes']['id']);
    $suggestions[] = $hook . '__' . $id;
  }
}
